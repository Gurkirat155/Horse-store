
/* SO TILL NOW IN BELOW MAIN CODE WE DID WAS we ran "cast sig "updateNumberOfHorses(uint256)"
    to get function selector sigature but huff can automatically 
    do that for us so that we don't have to manually do it
*/

/* Interface*/

#define function updateNumberOfHorses(uint256) nonpayable returns()
#define function viewNumberOfHorses() view returns(uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT1 = FREE_STORAGE_POINTER()  
#define constant NUMBER_OF_HORSES_STORAGE_SLOT2 = FREE_STORAGE_POINTER()  

// 60008060093d393df3 -- Contract creation bytecode (This is what is deployed on on chain)

// 0xe02600170000000000000000000000000000000000000000000000000000000000000001
#define macro MAIN() = takes(0) returns(0) {
    0x00  //[0]  thi is how stack looks like
    calldataload  // [calldata]

    // 0xe0260017 0000000000 0000000000 0000000000 0000000000 0000000000 000000 00000001
    // So we need to shift 56 places to the right or 28 bytes to the right or 224 bits the right
    // 64/2 = 32 bytes  viz 56/2= 28
    // SIMPLY 1 hex = 4 bits
    // 1 hex = 2 bytes
    // cast to-base 224 hex we get 0xe0(this is number of places we need to shift in hex)
    0xe0      //top [0xe0,calldata] bottom
    shr
    // This leaves us now with the function selector viz (0xe0260017)

    // Jump --> Function data associated with the function selector
    // if f_select = updateNumberOfHorses --> Jump to that code
    // if f_select = viewNumberOfHorses --> Jump to that code
    // 0x67d41eca == updateNumberOfHorses
    // 0x1afef78d == viewNumberOfHorses

    dup1  //This duplicates the value present at index 1 of the stack
    // [function_selector, function_selector]
    // updateNumberOfHorses selector function dispatch
    0x67d41eca   // [0x67d41eca, function_selector,function_selector]
    eq          // [true_if_func_selector_matches,function_selector]

    // jump to updateHorseNumber code if true

    updateJump  // [updateHorseNumberProgramCounter, true/false,function_selector]
    jumpi       // [function_selector]

    __FUNC_SIG(viewNumberOfHorses) // [0xa64569ad, function_selector]   THIS IS ANOTHER WAY TO GET THE FUNCTION SELECTOR 
    // WHICH IS MORE EFFCIENT THAN WRITING IT MANUALLY BY FINDING IT OUT MANUALLY USING cast sig "viewNumberOfHorses(uint256)"
    eq         //[true_if_func_selector_matches]
    readJump //[readNUmberofHorses,true/false]
    jumpi    //[]

    0x00 0x00 revert 

    updateJump:
        SET_NUMBER_OF_HORSES()

    readJump:
        READ_NUMBER_OF_HORSES()

}   

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0){
    // 1. Get the value to store from calldata
    0x04  //[4] to skip the function selctor // making an offset
    calldataload  // [calldata - function-selector] //removes the function selector and gives us the input for the function

    // 2. Give it a storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT1]  //[0] this will be stored here, now this will point out the first place avaiable for storage in the array
    // 3. store opcode
    
    sstore
    stop
}

#define macro READ_NUMBER_OF_HORSES() = takes(0) returns(0){
    // 1. Get the storage slot that we want to read from
    [NUMBER_OF_HORSES_STORAGE_SLOT1]    // [Key]
    sload  // [value] gets the value from storage and stores in stack
    // 2. Load the value of the slot in memory 
    //In order to return in forst we need to store the value present in stack in memory
    0x00  // [0, value] this is index in memory that we want to load the value in so that we can see it, just like storage
    mstore   // [] stack memory:[value]
    // 3. Return
    // 0x20 hex == 32 bytes
    0x20  // the value data length that it contains in memory 
    0x00  // index in memory that we wan to read from
    return

}